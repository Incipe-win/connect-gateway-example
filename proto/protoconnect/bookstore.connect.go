// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: bookstore.proto

package protoconnect

import (
	proto "bookstore_enhance/proto"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BookStoreName is the fully-qualified name of the BookStore service.
	BookStoreName = "bookstore.BookStore"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BookStoreListShelvesProcedure is the fully-qualified name of the BookStore's ListShelves RPC.
	BookStoreListShelvesProcedure = "/bookstore.BookStore/ListShelves"
	// BookStoreCreateShelfProcedure is the fully-qualified name of the BookStore's CreateShelf RPC.
	BookStoreCreateShelfProcedure = "/bookstore.BookStore/CreateShelf"
	// BookStoreGetShelfProcedure is the fully-qualified name of the BookStore's GetShelf RPC.
	BookStoreGetShelfProcedure = "/bookstore.BookStore/GetShelf"
	// BookStoreDeleteShelfProcedure is the fully-qualified name of the BookStore's DeleteShelf RPC.
	BookStoreDeleteShelfProcedure = "/bookstore.BookStore/DeleteShelf"
	// BookStoreListBooksProcedure is the fully-qualified name of the BookStore's ListBooks RPC.
	BookStoreListBooksProcedure = "/bookstore.BookStore/ListBooks"
	// BookStoreCreateBookProcedure is the fully-qualified name of the BookStore's CreateBook RPC.
	BookStoreCreateBookProcedure = "/bookstore.BookStore/CreateBook"
	// BookStoreGetBookProcedure is the fully-qualified name of the BookStore's GetBook RPC.
	BookStoreGetBookProcedure = "/bookstore.BookStore/GetBook"
	// BookStoreDeleteBookProcedure is the fully-qualified name of the BookStore's DeleteBook RPC.
	BookStoreDeleteBookProcedure = "/bookstore.BookStore/DeleteBook"
)

// BookStoreClient is a client for the bookstore.BookStore service.
type BookStoreClient interface {
	// 返回书店中所有书架的列表
	ListShelves(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[proto.ListShelvesResponse], error)
	// 在书店中创建一个新的书架
	CreateShelf(context.Context, *connect.Request[proto.CreateShelfRequest]) (*connect.Response[proto.Shelf], error)
	// 返回书店中指定的书架
	GetShelf(context.Context, *connect.Request[proto.GetShelfRequest]) (*connect.Response[proto.Shelf], error)
	// 删除书架，包括书架上存储的所有图书
	DeleteShelf(context.Context, *connect.Request[proto.DeleteShelfRequest]) (*connect.Response[emptypb.Empty], error)
	// 返回书架上的图书列表
	ListBooks(context.Context, *connect.Request[proto.ListBooksRequest]) (*connect.Response[proto.ListBooksResponse], error)
	// 创建一本新图书
	CreateBook(context.Context, *connect.Request[proto.CreateBookRequest]) (*connect.Response[proto.Book], error)
	// 返回特定的图书
	GetBook(context.Context, *connect.Request[proto.GetBookRequest]) (*connect.Response[proto.Book], error)
	// 从书架上删除一本图书
	DeleteBook(context.Context, *connect.Request[proto.DeleteBookRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewBookStoreClient constructs a client for the bookstore.BookStore service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBookStoreClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BookStoreClient {
	baseURL = strings.TrimRight(baseURL, "/")
	bookStoreMethods := proto.File_bookstore_proto.Services().ByName("BookStore").Methods()
	return &bookStoreClient{
		listShelves: connect.NewClient[emptypb.Empty, proto.ListShelvesResponse](
			httpClient,
			baseURL+BookStoreListShelvesProcedure,
			connect.WithSchema(bookStoreMethods.ByName("ListShelves")),
			connect.WithClientOptions(opts...),
		),
		createShelf: connect.NewClient[proto.CreateShelfRequest, proto.Shelf](
			httpClient,
			baseURL+BookStoreCreateShelfProcedure,
			connect.WithSchema(bookStoreMethods.ByName("CreateShelf")),
			connect.WithClientOptions(opts...),
		),
		getShelf: connect.NewClient[proto.GetShelfRequest, proto.Shelf](
			httpClient,
			baseURL+BookStoreGetShelfProcedure,
			connect.WithSchema(bookStoreMethods.ByName("GetShelf")),
			connect.WithClientOptions(opts...),
		),
		deleteShelf: connect.NewClient[proto.DeleteShelfRequest, emptypb.Empty](
			httpClient,
			baseURL+BookStoreDeleteShelfProcedure,
			connect.WithSchema(bookStoreMethods.ByName("DeleteShelf")),
			connect.WithClientOptions(opts...),
		),
		listBooks: connect.NewClient[proto.ListBooksRequest, proto.ListBooksResponse](
			httpClient,
			baseURL+BookStoreListBooksProcedure,
			connect.WithSchema(bookStoreMethods.ByName("ListBooks")),
			connect.WithClientOptions(opts...),
		),
		createBook: connect.NewClient[proto.CreateBookRequest, proto.Book](
			httpClient,
			baseURL+BookStoreCreateBookProcedure,
			connect.WithSchema(bookStoreMethods.ByName("CreateBook")),
			connect.WithClientOptions(opts...),
		),
		getBook: connect.NewClient[proto.GetBookRequest, proto.Book](
			httpClient,
			baseURL+BookStoreGetBookProcedure,
			connect.WithSchema(bookStoreMethods.ByName("GetBook")),
			connect.WithClientOptions(opts...),
		),
		deleteBook: connect.NewClient[proto.DeleteBookRequest, emptypb.Empty](
			httpClient,
			baseURL+BookStoreDeleteBookProcedure,
			connect.WithSchema(bookStoreMethods.ByName("DeleteBook")),
			connect.WithClientOptions(opts...),
		),
	}
}

// bookStoreClient implements BookStoreClient.
type bookStoreClient struct {
	listShelves *connect.Client[emptypb.Empty, proto.ListShelvesResponse]
	createShelf *connect.Client[proto.CreateShelfRequest, proto.Shelf]
	getShelf    *connect.Client[proto.GetShelfRequest, proto.Shelf]
	deleteShelf *connect.Client[proto.DeleteShelfRequest, emptypb.Empty]
	listBooks   *connect.Client[proto.ListBooksRequest, proto.ListBooksResponse]
	createBook  *connect.Client[proto.CreateBookRequest, proto.Book]
	getBook     *connect.Client[proto.GetBookRequest, proto.Book]
	deleteBook  *connect.Client[proto.DeleteBookRequest, emptypb.Empty]
}

// ListShelves calls bookstore.BookStore.ListShelves.
func (c *bookStoreClient) ListShelves(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[proto.ListShelvesResponse], error) {
	return c.listShelves.CallUnary(ctx, req)
}

// CreateShelf calls bookstore.BookStore.CreateShelf.
func (c *bookStoreClient) CreateShelf(ctx context.Context, req *connect.Request[proto.CreateShelfRequest]) (*connect.Response[proto.Shelf], error) {
	return c.createShelf.CallUnary(ctx, req)
}

// GetShelf calls bookstore.BookStore.GetShelf.
func (c *bookStoreClient) GetShelf(ctx context.Context, req *connect.Request[proto.GetShelfRequest]) (*connect.Response[proto.Shelf], error) {
	return c.getShelf.CallUnary(ctx, req)
}

// DeleteShelf calls bookstore.BookStore.DeleteShelf.
func (c *bookStoreClient) DeleteShelf(ctx context.Context, req *connect.Request[proto.DeleteShelfRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteShelf.CallUnary(ctx, req)
}

// ListBooks calls bookstore.BookStore.ListBooks.
func (c *bookStoreClient) ListBooks(ctx context.Context, req *connect.Request[proto.ListBooksRequest]) (*connect.Response[proto.ListBooksResponse], error) {
	return c.listBooks.CallUnary(ctx, req)
}

// CreateBook calls bookstore.BookStore.CreateBook.
func (c *bookStoreClient) CreateBook(ctx context.Context, req *connect.Request[proto.CreateBookRequest]) (*connect.Response[proto.Book], error) {
	return c.createBook.CallUnary(ctx, req)
}

// GetBook calls bookstore.BookStore.GetBook.
func (c *bookStoreClient) GetBook(ctx context.Context, req *connect.Request[proto.GetBookRequest]) (*connect.Response[proto.Book], error) {
	return c.getBook.CallUnary(ctx, req)
}

// DeleteBook calls bookstore.BookStore.DeleteBook.
func (c *bookStoreClient) DeleteBook(ctx context.Context, req *connect.Request[proto.DeleteBookRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteBook.CallUnary(ctx, req)
}

// BookStoreHandler is an implementation of the bookstore.BookStore service.
type BookStoreHandler interface {
	// 返回书店中所有书架的列表
	ListShelves(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[proto.ListShelvesResponse], error)
	// 在书店中创建一个新的书架
	CreateShelf(context.Context, *connect.Request[proto.CreateShelfRequest]) (*connect.Response[proto.Shelf], error)
	// 返回书店中指定的书架
	GetShelf(context.Context, *connect.Request[proto.GetShelfRequest]) (*connect.Response[proto.Shelf], error)
	// 删除书架，包括书架上存储的所有图书
	DeleteShelf(context.Context, *connect.Request[proto.DeleteShelfRequest]) (*connect.Response[emptypb.Empty], error)
	// 返回书架上的图书列表
	ListBooks(context.Context, *connect.Request[proto.ListBooksRequest]) (*connect.Response[proto.ListBooksResponse], error)
	// 创建一本新图书
	CreateBook(context.Context, *connect.Request[proto.CreateBookRequest]) (*connect.Response[proto.Book], error)
	// 返回特定的图书
	GetBook(context.Context, *connect.Request[proto.GetBookRequest]) (*connect.Response[proto.Book], error)
	// 从书架上删除一本图书
	DeleteBook(context.Context, *connect.Request[proto.DeleteBookRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewBookStoreHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBookStoreHandler(svc BookStoreHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bookStoreMethods := proto.File_bookstore_proto.Services().ByName("BookStore").Methods()
	bookStoreListShelvesHandler := connect.NewUnaryHandler(
		BookStoreListShelvesProcedure,
		svc.ListShelves,
		connect.WithSchema(bookStoreMethods.ByName("ListShelves")),
		connect.WithHandlerOptions(opts...),
	)
	bookStoreCreateShelfHandler := connect.NewUnaryHandler(
		BookStoreCreateShelfProcedure,
		svc.CreateShelf,
		connect.WithSchema(bookStoreMethods.ByName("CreateShelf")),
		connect.WithHandlerOptions(opts...),
	)
	bookStoreGetShelfHandler := connect.NewUnaryHandler(
		BookStoreGetShelfProcedure,
		svc.GetShelf,
		connect.WithSchema(bookStoreMethods.ByName("GetShelf")),
		connect.WithHandlerOptions(opts...),
	)
	bookStoreDeleteShelfHandler := connect.NewUnaryHandler(
		BookStoreDeleteShelfProcedure,
		svc.DeleteShelf,
		connect.WithSchema(bookStoreMethods.ByName("DeleteShelf")),
		connect.WithHandlerOptions(opts...),
	)
	bookStoreListBooksHandler := connect.NewUnaryHandler(
		BookStoreListBooksProcedure,
		svc.ListBooks,
		connect.WithSchema(bookStoreMethods.ByName("ListBooks")),
		connect.WithHandlerOptions(opts...),
	)
	bookStoreCreateBookHandler := connect.NewUnaryHandler(
		BookStoreCreateBookProcedure,
		svc.CreateBook,
		connect.WithSchema(bookStoreMethods.ByName("CreateBook")),
		connect.WithHandlerOptions(opts...),
	)
	bookStoreGetBookHandler := connect.NewUnaryHandler(
		BookStoreGetBookProcedure,
		svc.GetBook,
		connect.WithSchema(bookStoreMethods.ByName("GetBook")),
		connect.WithHandlerOptions(opts...),
	)
	bookStoreDeleteBookHandler := connect.NewUnaryHandler(
		BookStoreDeleteBookProcedure,
		svc.DeleteBook,
		connect.WithSchema(bookStoreMethods.ByName("DeleteBook")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bookstore.BookStore/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BookStoreListShelvesProcedure:
			bookStoreListShelvesHandler.ServeHTTP(w, r)
		case BookStoreCreateShelfProcedure:
			bookStoreCreateShelfHandler.ServeHTTP(w, r)
		case BookStoreGetShelfProcedure:
			bookStoreGetShelfHandler.ServeHTTP(w, r)
		case BookStoreDeleteShelfProcedure:
			bookStoreDeleteShelfHandler.ServeHTTP(w, r)
		case BookStoreListBooksProcedure:
			bookStoreListBooksHandler.ServeHTTP(w, r)
		case BookStoreCreateBookProcedure:
			bookStoreCreateBookHandler.ServeHTTP(w, r)
		case BookStoreGetBookProcedure:
			bookStoreGetBookHandler.ServeHTTP(w, r)
		case BookStoreDeleteBookProcedure:
			bookStoreDeleteBookHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBookStoreHandler returns CodeUnimplemented from all methods.
type UnimplementedBookStoreHandler struct{}

func (UnimplementedBookStoreHandler) ListShelves(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[proto.ListShelvesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bookstore.BookStore.ListShelves is not implemented"))
}

func (UnimplementedBookStoreHandler) CreateShelf(context.Context, *connect.Request[proto.CreateShelfRequest]) (*connect.Response[proto.Shelf], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bookstore.BookStore.CreateShelf is not implemented"))
}

func (UnimplementedBookStoreHandler) GetShelf(context.Context, *connect.Request[proto.GetShelfRequest]) (*connect.Response[proto.Shelf], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bookstore.BookStore.GetShelf is not implemented"))
}

func (UnimplementedBookStoreHandler) DeleteShelf(context.Context, *connect.Request[proto.DeleteShelfRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bookstore.BookStore.DeleteShelf is not implemented"))
}

func (UnimplementedBookStoreHandler) ListBooks(context.Context, *connect.Request[proto.ListBooksRequest]) (*connect.Response[proto.ListBooksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bookstore.BookStore.ListBooks is not implemented"))
}

func (UnimplementedBookStoreHandler) CreateBook(context.Context, *connect.Request[proto.CreateBookRequest]) (*connect.Response[proto.Book], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bookstore.BookStore.CreateBook is not implemented"))
}

func (UnimplementedBookStoreHandler) GetBook(context.Context, *connect.Request[proto.GetBookRequest]) (*connect.Response[proto.Book], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bookstore.BookStore.GetBook is not implemented"))
}

func (UnimplementedBookStoreHandler) DeleteBook(context.Context, *connect.Request[proto.DeleteBookRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bookstore.BookStore.DeleteBook is not implemented"))
}
